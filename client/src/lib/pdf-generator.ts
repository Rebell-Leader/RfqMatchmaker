import { jsPDF } from 'jspdf';
import { EmailTemplate } from '@shared/schema';

/**
 * Generate a PDF from an email template
 * Uses jsPDF to generate a PDF document
 * 
 * @param emailTemplate The email template to convert to PDF
 * @returns A Blob containing the PDF document
 */
export async function generatePdfFromEmail(emailTemplate: EmailTemplate): Promise<Blob> {
  const doc = new jsPDF();
  
  // Set up variables for document formatting
  const margin = 20;
  const lineHeight = 7;
  const titleFontSize = 16;
  const headingFontSize = 12;
  const normalFontSize = 10;
  const pageWidth = doc.internal.pageSize.getWidth();
  const contentWidth = pageWidth - (margin * 2);
  
  // Current Y position tracker
  let yPos = margin;
  
  // Add company letterhead (simplified version)
  doc.setFontSize(titleFontSize);
  doc.setFont('helvetica', 'bold');
  doc.text('MatchPoint RFQ Platform', margin, yPos);
  yPos += lineHeight * 1.5;
  
  // Add date
  doc.setFontSize(normalFontSize);
  doc.setFont('helvetica', 'normal');
  doc.text(`Date: ${new Date().toLocaleDateString()}`, margin, yPos);
  yPos += lineHeight * 2;
  
  // Add email header info
  doc.setFontSize(headingFontSize);
  doc.setFont('helvetica', 'bold');
  doc.text('Proposal Details', margin, yPos);
  yPos += lineHeight;
  
  doc.setFontSize(normalFontSize);
  doc.setFont('helvetica', 'normal');
  doc.text(`To: ${emailTemplate.to}`, margin, yPos);
  yPos += lineHeight;
  
  if (emailTemplate.cc) {
    doc.text(`CC: ${emailTemplate.cc}`, margin, yPos);
    yPos += lineHeight;
  }
  
  doc.text(`Subject: ${emailTemplate.subject}`, margin, yPos);
  yPos += lineHeight * 2;
  
  // Add email body content
  doc.setFontSize(headingFontSize);
  doc.setFont('helvetica', 'bold');
  doc.text('Message', margin, yPos);
  yPos += lineHeight;
  
  // Format email body text with proper line wrapping
  doc.setFontSize(normalFontSize);
  doc.setFont('helvetica', 'normal');
  
  // Break body text into paragraphs
  const paragraphs = emailTemplate.body.split('\n\n');
  
  paragraphs.forEach(paragraph => {
    if (paragraph.trim() === '') return;
    
    // Format text into lines for proper wrapping
    const lines = formatTextToLines(paragraph, 80); // Characters per line for A4 size doc
    
    lines.forEach(line => {
      // Check if we need a new page
      if (yPos > doc.internal.pageSize.getHeight() - margin) {
        doc.addPage();
        yPos = margin;
      }
      
      doc.text(line, margin, yPos);
      yPos += lineHeight;
    });
    
    // Add space between paragraphs
    yPos += lineHeight / 2;
  });
  
  // Add footer
  yPos = doc.internal.pageSize.getHeight() - margin;
  doc.setFontSize(normalFontSize - 2);
  doc.setFont('helvetica', 'italic');
  doc.text('Generated by MatchPoint RFQ Platform', margin, yPos);
  
  // Return the document as a Blob
  return doc.output('blob');
}

/**
 * Format text into lines with a maximum width
 * 
 * @param text The text to format
 * @param maxChars Maximum characters per line
 * @returns An array of lines
 */
function formatTextToLines(text: string, maxChars: number): string[] {
  const words = text.split(' ');
  const lines: string[] = [];
  let currentLine = '';
  
  words.forEach(word => {
    // Check if adding this word would exceed max line length
    if (currentLine.length + word.length + 1 > maxChars) {
      lines.push(currentLine.trim());
      currentLine = word;
    } else {
      currentLine += (currentLine ? ' ' : '') + word;
    }
  });
  
  // Add the last line if it has content
  if (currentLine.trim()) {
    lines.push(currentLine.trim());
  }
  
  return lines;
}